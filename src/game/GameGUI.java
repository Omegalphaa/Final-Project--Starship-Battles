/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author delta
 */
package game;
import javax.swing.ImageIcon;
public class GameGUI extends javax.swing.JFrame {
    /**
     * Creates new form GameGUI
     */
    public GameGUI() {
        initComponents();
        this.setTitle("Starship Battles");
        ImageIcon img = new ImageIcon("C:\\Users\\delta\\Dropbox\\My PC (LAPTOP-M0TSTD7V)\\Documents\\NetBeansProjects\\GameGui\\src\\starshipicon.jpg");
        this.setIconImage(img.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        errorPopup = new javax.swing.JOptionPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        StartMenu = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        SelectionMenu = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();
        jButton17 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        TutorialMenu1 = new javax.swing.JPanel();
        jScrollPane18 = new javax.swing.JScrollPane();
        jTextArea15 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton33 = new javax.swing.JButton();
        GameMenu = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton18 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        ShipManagementMenu = new javax.swing.JPanel();
        jButton9 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        playerInfo = new javax.swing.JTextArea();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        HullPanel = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTextArea8 = new javax.swing.JTextArea();
        EnginesPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea7 = new javax.swing.JTextArea();
        SuperWeaponPanel1 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextArea9 = new javax.swing.JTextArea();
        WeaponsPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextArea6 = new javax.swing.JTextArea();
        jButton20 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        CombatMenu = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        PlayerCombat = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        Engine = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        jTextArea11 = new javax.swing.JTextArea();
        jButton25 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        Weapons = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        jTextArea12 = new javax.swing.JTextArea();
        jSlider2 = new javax.swing.JSlider();
        jButton22 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        SuperWeapon = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTextArea13 = new javax.swing.JTextArea();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        playerInfoCombat = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        EnemyCombat = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTextArea14 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jSlider3 = new javax.swing.JSlider();
        jScrollPane16 = new javax.swing.JScrollPane();
        jTextArea10 = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane15 = new javax.swing.JScrollPane();
        jTextArea5 = new javax.swing.JTextArea();
        jScrollPane14 = new javax.swing.JScrollPane();
        enemyInfo = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        CombatLog = new javax.swing.JPanel();
        jScrollPane21 = new javax.swing.JScrollPane();
        jTextArea18 = new javax.swing.JTextArea();
        VictoryScreen = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        GameOverScreen = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jButton13 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        TutorialMenu2 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        jTextArea16 = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jButton34 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        TutorialMenu3 = new javax.swing.JPanel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTextArea17 = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        jButton38 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("StartScreen"); // NOI18N
        setResizable(false);
        setSize(new java.awt.Dimension(400, 350));
        getContentPane().setLayout(null);

        jTabbedPane2.setFocusable(false);

        StartMenu.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("A simple rogue-like.");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Starship Battles");

        jButton4.setText("Easy");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyClicked(evt);
            }
        });

        jButton5.setText("Normal");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalClicked(evt);
            }
        });

        jButton6.setText("Tutorial");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorialClicked(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Please Select the difficulty.");

        jButton1.setText("Quit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitClicked(evt);
            }
        });

        javax.swing.GroupLayout StartMenuLayout = new javax.swing.GroupLayout(StartMenu);
        StartMenu.setLayout(StartMenuLayout);
        StartMenuLayout.setHorizontalGroup(
            StartMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel2))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel3))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(jLabel4))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        StartMenuLayout.setVerticalGroup(
            StartMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StartMenuLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel3)
                .addGap(16, 16, 16)
                .addComponent(jLabel4)
                .addGap(16, 16, 16)
                .addComponent(jButton4)
                .addGap(17, 17, 17)
                .addComponent(jButton5)
                .addGap(17, 17, 17)
                .addComponent(jButton6)
                .addGap(17, 17, 17)
                .addComponent(jButton1))
        );

        jTabbedPane2.addTab("tab", StartMenu);
        StartMenu.getAccessibleContext().setAccessibleName("");

        jButton10.setText("Choose 1");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choose1Clicked(evt);
            }
        });

        jButton11.setText("Choose 2");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choose2Clicked(evt);
            }
        });

        jButton12.setText("Choose 3");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choose3Clicked(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(2);
        jTextArea2.setTabSize(0);
        jTextArea2.setText("*Component* 1\nHealth: 123\nArmor: 123\nType: Projectile\nCooldown: 123\nCharge: !123123");
        jTextArea2.setFocusable(false);
        jScrollPane2.setViewportView(jTextArea2);

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(2);
        jTextArea3.setTabSize(0);
        jTextArea3.setText("*Component* 2\nDamage: 1234\nSize: 1234\nType: Projectile\ncooldown123123\nCharge: !123123");
        jTextArea3.setFocusable(false);
        jScrollPane3.setViewportView(jTextArea3);

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(2);
        jTextArea4.setTabSize(0);
        jTextArea4.setText("*Component* 3\nEvade: 1234\nSpeed: 1234\nCooldown: 123\nasdasd\nCharge: !123123");
        jTextArea4.setToolTipText("");
        jScrollPane4.setViewportView(jTextArea4);

        jButton17.setText("Skip");
        jButton17.setFocusable(false);
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipClicked(evt);
            }
        });

        jButton19.setText("Manage Ship");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageShipClicked(evt);
            }
        });

        javax.swing.GroupLayout SelectionMenuLayout = new javax.swing.GroupLayout(SelectionMenu);
        SelectionMenu.setLayout(SelectionMenuLayout);
        SelectionMenuLayout.setHorizontalGroup(
            SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4))
                .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectionMenuLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton11)
                                .addComponent(jButton10)
                                .addComponent(jButton12))
                            .addGroup(SelectionMenuLayout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jButton17))))
                    .addGroup(SelectionMenuLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jButton19)))
                .addContainerGap(102, Short.MAX_VALUE))
        );
        SelectionMenuLayout.setVerticalGroup(
            SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SelectionMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectionMenuLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SelectionMenuLayout.createSequentialGroup()
                        .addComponent(jButton19)
                        .addGap(29, 29, 29)))
                .addGroup(SelectionMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SelectionMenuLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(SelectionMenuLayout.createSequentialGroup()
                        .addComponent(jButton10)
                        .addGap(18, 18, 18)
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton12)
                        .addGap(18, 18, 18)
                        .addComponent(jButton17)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab", SelectionMenu);

        jTextArea15.setEditable(false);
        jTextArea15.setColumns(20);
        jTextArea15.setLineWrap(true);
        jTextArea15.setRows(5);
        jTextArea15.setText("Starship Battles is a Rogue-like, meaning that the only thing gained from playing this game is knowledge. And as such, there is no saving whatsoever. \nWhen the game starts the player will have a choice of mode. Normal mode give the player one of each component and 2 weapons. Easy mode gives the player the same as normal mode but also gives the player a super weapon. The engine also has an additonal stat that effects cooldown times.");
        jTextArea15.setToolTipText("");
        jTextArea15.setWrapStyleWord(true);
        jTextArea15.setFocusable(false);
        jScrollPane18.setViewportView(jTextArea15);

        jButton2.setText("Return");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("General Info");

        jButton33.setText("Next");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextClicked(evt);
            }
        });

        javax.swing.GroupLayout TutorialMenu1Layout = new javax.swing.GroupLayout(TutorialMenu1);
        TutorialMenu1.setLayout(TutorialMenu1Layout);
        TutorialMenu1Layout.setHorizontalGroup(
            TutorialMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TutorialMenu1Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addGroup(TutorialMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(TutorialMenu1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane18)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu1Layout.createSequentialGroup()
                .addContainerGap(170, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115))
        );
        TutorialMenu1Layout.setVerticalGroup(
            TutorialMenu1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jButton33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(32, 32, 32))
        );

        jTabbedPane2.addTab("tab", TutorialMenu1);

        GameMenu.setFocusable(false);

        jButton7.setText("Tutorial");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorialClicked(evt);
            }
        });

        jButton8.setText("Quit");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitClicked(evt);
            }
        });

        jButton3.setText("Manage Ship");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageShipClicked(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Current Stats");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(10);
        jTextArea1.setRows(2);
        jTextArea1.setTabSize(0);
        jTextArea1.setText("Current Level: 12312\nHealth: 123/123\nWeapons: 30\nStorage: 123/123\n");
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        jButton18.setText("Next Combat");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextLevelClicked(evt);
            }
        });

        jLabel13.setText("Next Combat is a (Normal Fight|Boss Fight)");

        javax.swing.GroupLayout GameMenuLayout = new javax.swing.GroupLayout(GameMenu);
        GameMenu.setLayout(GameMenuLayout);
        GameMenuLayout.setHorizontalGroup(
            GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GameMenuLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(GameMenuLayout.createSequentialGroup()
                        .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(GameMenuLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(GameMenuLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel13)
                                .addGap(0, 81, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameMenuLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(90, 90, 90))))))
        );
        GameMenuLayout.setVerticalGroup(
            GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton18))
                .addGap(18, 18, 18)
                .addGroup(GameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8)
                    .addComponent(jButton3))
                .addGap(103, 103, 103))
        );

        jTabbedPane2.addTab("tab", GameMenu);

        jButton9.setText("Return");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnClicked(evt);
            }
        });

        jLabel5.setText("Ship Management Menu");

        playerInfo.setEditable(false);
        playerInfo.setColumns(5);
        playerInfo.setRows(5);
        playerInfo.setText("Health: 123/123\nArmor: 123\nWeapons: 30\nStorage: 123\nEvade: 12\nSpeed: 12\n");
        playerInfo.setFocusable(false);
        jScrollPane5.setViewportView(playerInfo);

        jTabbedPane1.setName(""); // NOI18N

        jTextArea8.setEditable(false);
        jTextArea8.setColumns(20);
        jTextArea8.setRows(5);
        jTextArea8.setText("Hull:\nHealth: 123\nArmor: 123");
        jTextArea8.setFocusable(false);
        jScrollPane8.setViewportView(jTextArea8);

        javax.swing.GroupLayout HullPanelLayout = new javax.swing.GroupLayout(HullPanel);
        HullPanel.setLayout(HullPanelLayout);
        HullPanelLayout.setHorizontalGroup(
            HullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HullPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );
        HullPanelLayout.setVerticalGroup(
            HullPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HullPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Hull", HullPanel);

        jTextArea7.setEditable(false);
        jTextArea7.setColumns(20);
        jTextArea7.setRows(5);
        jTextArea7.setText("Engine:\nEvade: 12\nSpeed: 12\nCooldown: 123\n(Effeiceny: 123");
        jTextArea7.setFocusable(false);
        jScrollPane7.setViewportView(jTextArea7);

        javax.swing.GroupLayout EnginesPanel1Layout = new javax.swing.GroupLayout(EnginesPanel1);
        EnginesPanel1.setLayout(EnginesPanel1Layout);
        EnginesPanel1Layout.setHorizontalGroup(
            EnginesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnginesPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );
        EnginesPanel1Layout.setVerticalGroup(
            EnginesPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnginesPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Engine", EnginesPanel1);

        jTextArea9.setEditable(false);
        jTextArea9.setColumns(20);
        jTextArea9.setRows(5);
        jTextArea9.setText("Super Weapon:\nType: Projectile\nDamage: 123\nCooldown: 123\nCharge: 123");
        jTextArea9.setFocusable(false);
        jScrollPane9.setViewportView(jTextArea9);

        javax.swing.GroupLayout SuperWeaponPanel1Layout = new javax.swing.GroupLayout(SuperWeaponPanel1);
        SuperWeaponPanel1.setLayout(SuperWeaponPanel1Layout);
        SuperWeaponPanel1Layout.setHorizontalGroup(
            SuperWeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuperWeaponPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addContainerGap())
        );
        SuperWeaponPanel1Layout.setVerticalGroup(
            SuperWeaponPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuperWeaponPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(110, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Super Weapon", SuperWeaponPanel1);

        jTextArea6.setEditable(false);
        jTextArea6.setColumns(1);
        jTextArea6.setRows(5);
        jTextArea6.setText("Weapon: #\nType: Projectile\nDamage: 123\nSize: 123\nCooldown: 123");
        jTextArea6.setFocusable(false);
        jScrollPane6.setViewportView(jTextArea6);

        jButton20.setText("Remove Weapon");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeWeaponClicked(evt);
            }
        });

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(30);
        jSlider1.setMinimum(1);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setValue(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMoved(evt);
            }
        });
        jSlider1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderReleased(evt);
            }
        });

        javax.swing.GroupLayout WeaponsPanel1Layout = new javax.swing.GroupLayout(WeaponsPanel1);
        WeaponsPanel1.setLayout(WeaponsPanel1Layout);
        WeaponsPanel1Layout.setHorizontalGroup(
            WeaponsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponsPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WeaponsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addContainerGap())
            .addGroup(WeaponsPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButton20)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        WeaponsPanel1Layout.setVerticalGroup(
            WeaponsPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponsPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton20)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Weapons", WeaponsPanel1);

        javax.swing.GroupLayout ShipManagementMenuLayout = new javax.swing.GroupLayout(ShipManagementMenu);
        ShipManagementMenu.setLayout(ShipManagementMenuLayout);
        ShipManagementMenuLayout.setHorizontalGroup(
            ShipManagementMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                .addGroup(ShipManagementMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        ShipManagementMenuLayout.setVerticalGroup(
            ShipManagementMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                .addContainerGap(51, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addGroup(ShipManagementMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ShipManagementMenuLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addContainerGap())
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Hull");

        jTabbedPane2.addTab("tab", ShipManagementMenu);

        jTextArea11.setEditable(false);
        jTextArea11.setColumns(5);
        jTextArea11.setLineWrap(true);
        jTextArea11.setRows(2);
        jTextArea11.setTabSize(2);
        jTextArea11.setText("Engine:\nEvade: 12\nSpeed: 12\nCooldown: 123\n(Effeiceny: 123\nChoice: None");
        jTextArea11.setFocusable(false);
        jScrollPane11.setViewportView(jTextArea11);

        jButton25.setText("Choose Evade");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evadeChose(evt);
            }
        });

        jButton26.setText("Choose Move");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveChose(evt);
            }
        });

        jButton28.setText("Reset");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineResetChose(evt);
            }
        });

        javax.swing.GroupLayout EngineLayout = new javax.swing.GroupLayout(Engine);
        Engine.setLayout(EngineLayout);
        EngineLayout.setHorizontalGroup(
            EngineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EngineLayout.createSequentialGroup()
                .addGroup(EngineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EngineLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane11))
                    .addGroup(EngineLayout.createSequentialGroup()
                        .addGroup(EngineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EngineLayout.createSequentialGroup()
                                .addGap(82, 82, 82)
                                .addComponent(jButton28))
                            .addGroup(EngineLayout.createSequentialGroup()
                                .addGap(48, 48, 48)
                                .addGroup(EngineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
        );
        EngineLayout.setVerticalGroup(
            EngineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EngineLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton28)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Engine", Engine);

        jTextArea12.setEditable(false);
        jTextArea12.setColumns(5);
        jTextArea12.setRows(2);
        jTextArea12.setText("Weapon #:\nType: Projectile\nDamage: 123\nSize: 123\nCooldown: 123\nChoice: None");
        jTextArea12.setFocusable(false);
        jScrollPane12.setViewportView(jTextArea12);

        jSlider2.setMajorTickSpacing(1);
        jSlider2.setMaximum(30);
        jSlider2.setMinimum(1);
        jSlider2.setMinorTickSpacing(1);
        jSlider2.setValue(1);
        jSlider2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderReleased(evt);
            }
        });

        jButton22.setText("Choose Attack");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponAttackChose(evt);
            }
        });

        jButton29.setText("Reset");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponResetChose(evt);
            }
        });

        javax.swing.GroupLayout WeaponsLayout = new javax.swing.GroupLayout(Weapons);
        Weapons.setLayout(WeaponsLayout);
        WeaponsLayout.setHorizontalGroup(
            WeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponsLayout.createSequentialGroup()
                .addGroup(WeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WeaponsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addComponent(jScrollPane12)))
                    .addGroup(WeaponsLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButton22)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(WeaponsLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jButton29)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WeaponsLayout.setVerticalGroup(
            WeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WeaponsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jButton22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton29)
                .addContainerGap())
        );

        jTabbedPane3.addTab("Weapons", Weapons);

        jTextArea13.setEditable(false);
        jTextArea13.setColumns(5);
        jTextArea13.setLineWrap(true);
        jTextArea13.setRows(2);
        jTextArea13.setText("Super Weapon:\nType: Projectile\nDamage: 123\nCooldown: 123\nCharge: 123\nChoice: None");
        jTextArea13.setFocusable(false);
        jScrollPane13.setViewportView(jTextArea13);

        jButton23.setText("Choose Attack");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superWeaponAttackChose(evt);
            }
        });

        jButton24.setText("Choose Charge");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superWeaponChargeChose(evt);
            }
        });

        jButton30.setText("Reset");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                superWeaponResetChose(evt);
            }
        });

        javax.swing.GroupLayout SuperWeaponLayout = new javax.swing.GroupLayout(SuperWeapon);
        SuperWeapon.setLayout(SuperWeaponLayout);
        SuperWeaponLayout.setHorizontalGroup(
            SuperWeaponLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuperWeaponLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13)
                .addContainerGap())
            .addGroup(SuperWeaponLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jButton30)
                .addContainerGap(81, Short.MAX_VALUE))
            .addGroup(SuperWeaponLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(SuperWeaponLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton24, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        SuperWeaponLayout.setVerticalGroup(
            SuperWeaponLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SuperWeaponLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton23)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton30)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Super Weapon", SuperWeapon);

        playerInfoCombat.setEditable(false);
        playerInfoCombat.setColumns(5);
        playerInfoCombat.setRows(1);
        playerInfoCombat.setTabSize(0);
        playerInfoCombat.setText("Health: 123/123\nArmor: 123");
        playerInfoCombat.setFocusable(false);
        jScrollPane10.setViewportView(playerInfoCombat);

        jLabel11.setText("Normal Fight|Boss Fight");

        jLabel14.setText("Turn #");

        jButton21.setText("End Turn");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnClicked(evt);
            }
        });

        jButton27.setText("Quit");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitClicked(evt);
            }
        });

        jButton32.setText("Tutorial");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tutorialClicked(evt);
            }
        });

        javax.swing.GroupLayout PlayerCombatLayout = new javax.swing.GroupLayout(PlayerCombat);
        PlayerCombat.setLayout(PlayerCombatLayout);
        PlayerCombatLayout.setHorizontalGroup(
            PlayerCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlayerCombatLayout.createSequentialGroup()
                .addGroup(PlayerCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PlayerCombatLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PlayerCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane10)
                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(PlayerCombatLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(PlayerCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        PlayerCombatLayout.setVerticalGroup(
            PlayerCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlayerCombatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane3)
                .addContainerGap())
            .addGroup(PlayerCombatLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton32)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Player", PlayerCombat);

        jScrollPane17.setFocusable(false);

        jTextArea14.setEditable(false);
        jTextArea14.setColumns(5);
        jTextArea14.setTabSize(0);
        jTextArea14.setText("Engine:\nEvade: 12\nSpeed: 12\nCooldown: 123\n(Effeiceny: 123\nChoice: None");
        jScrollPane17.setViewportView(jTextArea14);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(136, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Engine", jPanel1);

        jSlider3.setMajorTickSpacing(1);
        jSlider3.setMaximum(30);
        jSlider3.setMinimum(1);
        jSlider3.setMinorTickSpacing(1);
        jSlider3.setValue(1);
        jSlider3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sliderReleased(evt);
            }
        });

        jTextArea10.setEditable(false);
        jTextArea10.setColumns(5);
        jTextArea10.setRows(3);
        jTextArea10.setTabSize(0);
        jTextArea10.setText("Weapon #:\nType: Projectile\nDamage: 123\nSize: 123\nCooldown: 123\nChoice: None");
        jTextArea10.setFocusable(false);
        jScrollPane16.setViewportView(jTextArea10);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16)
                    .addComponent(jSlider3, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane16, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(101, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Weapons", jPanel2);

        jTextArea5.setEditable(false);
        jTextArea5.setColumns(5);
        jTextArea5.setRows(5);
        jTextArea5.setTabSize(0);
        jTextArea5.setText("Super Weapon:\nType: Projectile\nDamage: 123\nCooldown: 123\nCharge: 123\nChoice: None");
        jTextArea5.setFocusable(false);
        jScrollPane15.setViewportView(jTextArea5);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Super Weapon", jPanel3);

        enemyInfo.setEditable(false);
        enemyInfo.setColumns(1);
        enemyInfo.setRows(3);
        enemyInfo.setText("Health: 123/123\nShield: 20/20\nArmor: 123\nWeapons: 231\nEvade: 123\nSpeed: 123");
        enemyInfo.setFocusable(false);
        jScrollPane14.setViewportView(enemyInfo);

        jLabel12.setText("Normal Fight|Boss Fight");

        javax.swing.GroupLayout EnemyCombatLayout = new javax.swing.GroupLayout(EnemyCombat);
        EnemyCombat.setLayout(EnemyCombatLayout);
        EnemyCombatLayout.setHorizontalGroup(
            EnemyCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnemyCombatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EnemyCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        EnemyCombatLayout.setVerticalGroup(
            EnemyCombatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnemyCombatLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(EnemyCombatLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Enemy", EnemyCombat);

        jScrollPane21.setFocusable(false);

        jTextArea18.setEditable(false);
        jTextArea18.setColumns(20);
        jTextArea18.setRows(5);
        jTextArea18.setFocusable(false);
        jScrollPane21.setViewportView(jTextArea18);

        javax.swing.GroupLayout CombatLogLayout = new javax.swing.GroupLayout(CombatLog);
        CombatLog.setLayout(CombatLogLayout);
        CombatLogLayout.setHorizontalGroup(
            CombatLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane21, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );
        CombatLogLayout.setVerticalGroup(
            CombatLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatLogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane21, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane5.addTab("Combat Log", CombatLog);

        javax.swing.GroupLayout CombatMenuLayout = new javax.swing.GroupLayout(CombatMenu);
        CombatMenu.setLayout(CombatMenuLayout);
        CombatMenuLayout.setHorizontalGroup(
            CombatMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatMenuLayout.createSequentialGroup()
                .addComponent(jTabbedPane5)
                .addContainerGap())
        );
        CombatMenuLayout.setVerticalGroup(
            CombatMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CombatMenuLayout.createSequentialGroup()
                .addComponent(jTabbedPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab", CombatMenu);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Congratulations, you have emerged victorious!");

        jLabel8.setText("What Component Type would you like to choose from?");

        jButton14.setText("Hull");
        jButton14.setActionCommand("[73, 23]");
        jButton14.setPreferredSize(new java.awt.Dimension(55, 23));
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HullChosen(evt);
            }
        });

        jButton15.setText("Engine");
        jButton15.setPreferredSize(new java.awt.Dimension(73, 23));
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engineChosen(evt);
            }
        });

        jButton16.setText("Weapon");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weaponChosen(evt);
            }
        });

        javax.swing.GroupLayout VictoryScreenLayout = new javax.swing.GroupLayout(VictoryScreen);
        VictoryScreen.setLayout(VictoryScreenLayout);
        VictoryScreenLayout.setHorizontalGroup(
            VictoryScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VictoryScreenLayout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(VictoryScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VictoryScreenLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton16))
                    .addComponent(jLabel7)
                    .addGroup(VictoryScreenLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel8)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        VictoryScreenLayout.setVerticalGroup(
            VictoryScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VictoryScreenLayout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(VictoryScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16))
                .addContainerGap(193, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab", VictoryScreen);

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("You have been defeated!");

        jButton13.setText("Play Again!");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gameResetClicked(evt);
            }
        });

        jButton31.setText("Quit");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitClicked(evt);
            }
        });

        javax.swing.GroupLayout GameOverScreenLayout = new javax.swing.GroupLayout(GameOverScreen);
        GameOverScreen.setLayout(GameOverScreenLayout);
        GameOverScreenLayout.setHorizontalGroup(
            GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameOverScreenLayout.createSequentialGroup()
                .addGroup(GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GameOverScreenLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(jLabel10))
                    .addGroup(GameOverScreenLayout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton31, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton13))))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        GameOverScreenLayout.setVerticalGroup(
            GameOverScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GameOverScreenLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113)
                .addComponent(jButton13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton31)
                .addContainerGap(128, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab", GameOverScreen);

        jTextArea16.setEditable(false);
        jTextArea16.setColumns(20);
        jTextArea16.setLineWrap(true);
        jTextArea16.setRows(5);
        jTextArea16.setText("In the Ship Management menu you can view all of your ships stats and components. If you wish, you can remove one of your weapons down to your last weapon. You cannot remove all of your weapons.\n\nIn combat there is a similar menu to the one in Ship Management. You can select your desired choice for each system. You can also view your enemies's choices for that turn.");
        jTextArea16.setWrapStyleWord(true);
        jTextArea16.setFocusable(false);
        jScrollPane19.setViewportView(jTextArea16);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Ship Mangement");

        jButton34.setText("Next");
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextClicked(evt);
            }
        });

        jButton35.setText("Return");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35returnClicked(evt);
            }
        });

        jButton36.setText("Previous");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousClicked(evt);
            }
        });

        javax.swing.GroupLayout TutorialMenu2Layout = new javax.swing.GroupLayout(TutorialMenu2);
        TutorialMenu2.setLayout(TutorialMenu2Layout);
        TutorialMenu2Layout.setHorizontalGroup(
            TutorialMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TutorialMenu2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu2Layout.createSequentialGroup()
                .addGap(0, 149, Short.MAX_VALUE)
                .addComponent(jButton36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton34, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
            .addGroup(TutorialMenu2Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton35, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(172, 172, 172))
        );
        TutorialMenu2Layout.setVerticalGroup(
            TutorialMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane19, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addGroup(TutorialMenu2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton34)
                    .addComponent(jButton36))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton35)
                .addGap(16, 16, 16))
        );

        jTabbedPane2.addTab("tab", TutorialMenu2);

        jTextArea17.setEditable(false);
        jTextArea17.setColumns(20);
        jTextArea17.setLineWrap(true);
        jTextArea17.setRows(5);
        jTextArea17.setText("In combat there is a similar menu to the one in Ship Management. You can select your desired choice for each system. You can also view your enemies's choices for that turn.\n\nBoss combats happen every 5th level.\n\nAfter each successful combat you will have a choice of a component. After each successful boss combat you will have a choice of super weapon on top of the normal component choice.\nYou will heal for 10% of your max health\n\n after every combat.");
        jTextArea17.setWrapStyleWord(true);
        jScrollPane20.setViewportView(jTextArea17);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setText("Combat");

        jButton38.setText("Return");
        jButton38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnClicked(evt);
            }
        });

        jButton39.setText("Previous");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousClicked(evt);
            }
        });

        javax.swing.GroupLayout TutorialMenu3Layout = new javax.swing.GroupLayout(TutorialMenu3);
        TutorialMenu3.setLayout(TutorialMenu3Layout);
        TutorialMenu3Layout.setHorizontalGroup(
            TutorialMenu3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TutorialMenu3Layout.createSequentialGroup()
                .addGroup(TutorialMenu3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TutorialMenu3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane20))
                    .addGroup(TutorialMenu3Layout.createSequentialGroup()
                        .addGroup(TutorialMenu3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(TutorialMenu3Layout.createSequentialGroup()
                                .addGap(155, 155, 155)
                                .addGroup(TutorialMenu3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton39)
                                    .addComponent(jButton38, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(TutorialMenu3Layout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addComponent(jLabel15)))
                        .addGap(0, 187, Short.MAX_VALUE)))
                .addContainerGap())
        );
        TutorialMenu3Layout.setVerticalGroup(
            TutorialMenu3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TutorialMenu3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane20, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                .addGap(25, 25, 25)
                .addComponent(jButton39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton38)
                .addGap(16, 16, 16))
        );

        jTabbedPane2.addTab("tab10", TutorialMenu3);

        getContentPane().add(jTabbedPane2);
        jTabbedPane2.setBounds(0, -30, 400, 410);

        setSize(new java.awt.Dimension(416, 420));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private static int level, location = 0, selectNum = 1, turn = 0, tutorialNum = 1;
    private static int damageDealtP, damageDealtE;
    private static boolean completedStart = false, superWeaponCheck = false;
    private static String selection, mode;
    TurnSystem playerSystem;
    TurnSystem enemySystem;
    
    private static Ship playerShip, enemyShip;
    private static BossShip playerBoss, enemyBoss;
    
    private static Engine engine1;
    private static Engine engine2;
    private static Engine engine3;
    private static SuperEngine sengine1;
    private static SuperEngine sengine2;
    private static SuperEngine sengine3;
    private static Hull hull1;
    private static Hull hull2;
    private static Hull hull3;
    private static SuperHull shull1;
    private static SuperHull shull2;
    private static SuperHull shull3;
    private static Weapon weapon1;
    private static Weapon weapon2;
    private static Weapon weapon3;
    private static SuperWeapon sweapon1;
    private static SuperWeapon sweapon2;
    private static SuperWeapon sweapon3;
    
    private void normalClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalClicked
            mode = "Normal";
            
            playerShip = new Ship(true, 1);
            selectNum = 1;
            beginSelect("Engine", 1);
            selection = "Engine";
            
        
    }//GEN-LAST:event_normalClicked

    private void easyClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyClicked
        mode = "Easy";
        playerBoss = new BossShip(true, 1);
        selectNum = 1;
        beginSelect("SuperEngine", 1);
        selection = "SuperEngine";
    }//GEN-LAST:event_easyClicked

    private void tutorialClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tutorialClicked
        gotoTutorial();
    }//GEN-LAST:event_tutorialClicked

    private void quitClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitClicked
        dispose();
    }//GEN-LAST:event_quitClicked

    private void returnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnClicked
        jTabbedPane2.setSelectedIndex(location);
    }//GEN-LAST:event_returnClicked

    private void manageShipClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageShipClicked
        // TODO add your handling code here:
        if(mode == "Normal"){
            try{
                playerShip.getHull().getArmor();
                playerShip.getEngine().getSpeed();
                playerShip.getWeapon(0).getDamage();
                playerShip.getWeapon(1).getDamage();
            }
            catch(NullPointerException e){
                errorPopup.showMessageDialog(this, "Please select all components first");
                return;
            }
            catch(ArrayIndexOutOfBoundsException e){
                errorPopup.showMessageDialog(this, "Please select all components first");
                return;
            }
        }
        else{
            try{
                playerBoss.getSuperHull().getArmor();
                playerBoss.getSuperEngine().getSpeed();
                playerBoss.getWeapon(0).getDamage();
                playerBoss.getWeapon(1).getDamage();
                playerBoss.getSuperWeapon().getDamage();
            }
            catch(NullPointerException e){
                errorPopup.showMessageDialog(this, "Please select all components first");
                return;
            }
            catch(ArrayIndexOutOfBoundsException e){
                errorPopup.showMessageDialog(this, "Please select all components first");
                return;
            }

        }      
        updateShip();
        gotoManageShip();
    }//GEN-LAST:event_manageShipClicked

    private void HullChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HullChosen
        // TODO add your handling code here:
        if (mode == "Normal"){
            beginSelect("Hull", level);
        }
        else{
            beginSelect("SuperHull", level);
        }
    }//GEN-LAST:event_HullChosen

    private void engineChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineChosen
        // TODO add your handling code here:
        if (mode == "Normal"){
            beginSelect("Engine", level);
        }
        else{
            beginSelect("SuperEngine", level);
        }
    }//GEN-LAST:event_engineChosen

    private void weaponChosen(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponChosen
        // TODO add your handling code here:
        beginSelect("Weapon", level);
    }//GEN-LAST:event_weaponChosen

    private void choose1Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choose1Clicked
        // TODO add your handling code here:
        if(selection == "Weapon"){
            try{
                choose(selection, 1);
            }
            catch(WeaponStorageException e){
                errorPopup.showMessageDialog(this, e.getMessage());
            }
        }
        else{
            choose(selection, 1);
        }
    }//GEN-LAST:event_choose1Clicked

    private void choose2Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choose2Clicked
        // TODO add your handling code here:
        if(selection == "Weapon"){
            try{
                choose(selection, 2);
            }
            catch(WeaponStorageException e){
                errorPopup.showMessageDialog(this, e.getMessage());
            }
        }
        else{
            choose(selection, 2);
        }
        
    }//GEN-LAST:event_choose2Clicked

    private void choose3Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_choose3Clicked
        // TODO add your handling code here:
        if(selection == "Weapon"){
            try{
                choose(selection, 3);
            }
            catch(WeaponStorageException e){
                errorPopup.showMessageDialog(this, e.getMessage());
            }
        }
        else{
            choose(selection, 3);
        }
        
        
    }//GEN-LAST:event_choose3Clicked

    private void skipClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipClicked
        // TODO add your handling code here:
        if(mode == "Normal"){
            switch(selectNum){
                case 1:
                    try{
                        playerShip.getEngine().getArmed();
                    }
                    catch(NullPointerException e){
                        errorPopup.showMessageDialog(this, "Please select an Engine");
                        return;
                    }
                    break;
            
                case 2:
                    try{
                        playerShip.getHull().getArmor();
                    }
                    catch(NullPointerException e){
                        errorPopup.showMessageDialog(this, "Please select a Hull");
                        return;
                    }
                case 3:
                    try{
                        playerShip.getWeapon(0).getDamage();
                    }
                    catch(ArrayIndexOutOfBoundsException e){
                        errorPopup.showMessageDialog(this, "Please select your first weapon");
                        return;
                    }
                case 4:
                    try{
                        playerShip.getWeapon(1).getDamage();
                    }
                    catch(ArrayIndexOutOfBoundsException e){
                        errorPopup.showMessageDialog(this, "Please select your second weapon");
                        return;
                    }
            }
        }
        else{
            switch(selectNum){
                case 1:
                    try{
                        playerBoss.getSuperEngine().getArmed();
                    }
                    catch(NullPointerException e){
                        errorPopup.showMessageDialog(this, "Please select an Engine");
                    }
                    break;
            
                case 2:
                    try{
                        playerBoss.getSuperHull().getArmor();
                    }
                    catch(NullPointerException e){
                        errorPopup.showMessageDialog(this, "Please select a Hull");
                    }
                case 3:
                    try{
                        playerBoss.getWeapon(0).getDamage();
                    }
                    catch(ArrayIndexOutOfBoundsException e){
                        errorPopup.showMessageDialog(this, "Please select your first weapon");
                    }
                case 4:
                    try{
                        playerBoss.getWeapon(1).getDamage();
                    }
                    catch(ArrayIndexOutOfBoundsException e){
                        errorPopup.showMessageDialog(this, "Please select your second weapon");
                    }
                case 5:
                    try{
                        playerBoss.getSuperWeapon().getDamage();
                    }
                    catch(NullPointerException e){
                        errorPopup.showMessageDialog(this, "Please select your Super Weapon");
                    }
            }
        }
        gotoMain();
    }//GEN-LAST:event_skipClicked

    private void nextLevelClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextLevelClicked
        // TODO add your handling code here:
        
        startLevel();
        updateShipInfo();
    }//GEN-LAST:event_nextLevelClicked

    private void removeWeaponClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeWeaponClicked
        // TODO add your handling code here:
        int weapon = jSlider1.getValue();
        try{
            if(mode == "Normal"){
                playerShip.removeWeapon(weapon);
                jSlider1.setMaximum(playerShip.getWeapons().length - 1);
                jSlider2.setMaximum(playerBoss.getWeapons().length - 1);
            }
            else{
                playerBoss.removeWeapon(weapon);
                jSlider1.setMaximum(playerBoss.getWeapons().length - 1);
                jSlider2.setMaximum(playerBoss.getWeapons().length - 1);
            }
            updateShip();
            updateShipInfo();
        }
        catch(ArrayIndexOutOfBoundsException e){
            errorPopup.showMessageDialog(this, "You cannot remove all of your weapons");
        }
        
    }//GEN-LAST:event_removeWeaponClicked

    private void sliderMoved(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_sliderMoved

    private void sliderReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderReleased
        // TODO add your handling code here:
        updateShip();
        updateCombatShip();
    }//GEN-LAST:event_sliderReleased

    private void endTurnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnClicked
        // TODO add your handling code here:
        int pHealth, eHealth;
        if(mode == "Normal"){
            pHealth = playerShip.getHull().getCurrentHealth();
        }
        else{
            pHealth = playerBoss.getSuperHull().getCurrentHealth();
        }
        
        if(level % 5 != 0){
            eHealth = enemyShip.getHull().getCurrentHealth();
        }
        else{
            eHealth = enemyBoss.getSuperHull().getCurrentHealth();
        }
        playerSystem.advanceEngineTurn();
        enemySystem.advanceEngineTurn();
        playerSystem.advanceWeaponTurn();
        playerSystem.advanceSuperWeaponTurn();
        enemySystem.advanceWeaponTurn();
        enemySystem.advanceSuperWeaponTurn();
        if(mode == "Normal"){
            damageDealtE = pHealth - playerShip.getHull().getCurrentHealth();
        }
        else{
            damageDealtE = pHealth - playerBoss.getSuperHull().getCurrentHealth();
        }
        
        if(level % 5 != 0){
            damageDealtP = eHealth - enemyShip.getHull().getCurrentHealth();
        }
        else{
            damageDealtP = eHealth - enemyBoss.getSuperHull().getCurrentHealth();
        }
        checkEndLevel();
    }//GEN-LAST:event_endTurnClicked

    private void evadeChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evadeChose
        // TODO add your handling code here:
        try{
            playerSystem.addEngineChoice("Evade");
            updateCombatShip();
        }
        catch(OverUseException e){
            errorPopup.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_evadeChose

    private void moveChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveChose
        // TODO add your handling code here:
        try{
            playerSystem.addEngineChoice("Move");
            updateCombatShip();
        }
        catch(OverUseException e){
            errorPopup.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_moveChose

    private void weaponAttackChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponAttackChose
        // TODO add your handling code here:
        try{
            playerSystem.addWeaponChoice(jSlider2.getValue(), "Attack");
            updateCombatShip();
        }
        catch(OverUseException e){
            errorPopup.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_weaponAttackChose

    private void engineResetChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engineResetChose
        // TODO add your handling code here:
        playerSystem.addEngineChoice("None");
        updateCombatShip();
    }//GEN-LAST:event_engineResetChose

    private void weaponResetChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weaponResetChose
        // TODO add your handling code here:
        playerSystem.addWeaponChoice(jSlider2.getValue(), "None");
        updateCombatShip();
    }//GEN-LAST:event_weaponResetChose

    private void superWeaponResetChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superWeaponResetChose
        // TODO add your handling code here:
        playerSystem.addSuperWeaponChoice("None");
        updateCombatShip();
    }//GEN-LAST:event_superWeaponResetChose

    private void gameResetClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gameResetClicked
        // TODO add your handling code here:
        gotoStart();
    }//GEN-LAST:event_gameResetClicked

    private void nextClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextClicked
        // TODO add your handling code here:
        nextTutorial();
    }//GEN-LAST:event_nextClicked

    private void jButton35returnClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35returnClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton35returnClicked

    private void previousClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousClicked
        // TODO add your handling code here:
        previousTutorial();
    }//GEN-LAST:event_previousClicked

    private void superWeaponChargeChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superWeaponChargeChose
        // TODO add your handling code here:
        try{
            playerSystem.addSuperWeaponChoice("Charge");
            updateCombatShip();
        }
        catch(OverChargeException e){
            errorPopup.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_superWeaponChargeChose

    private void superWeaponAttackChose(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_superWeaponAttackChose
        // TODO add your handling code here:
        try{
            playerSystem.addSuperWeaponChoice("Attack");
            updateCombatShip();
        }
        catch(OverUseException e){
            errorPopup.showMessageDialog(this, "Super weapon on cooldown/ Not fully charged");
        }
    }//GEN-LAST:event_superWeaponAttackChose

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        level = 0;
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CombatLog;
    private javax.swing.JPanel CombatMenu;
    private javax.swing.JPanel EnemyCombat;
    private javax.swing.JPanel Engine;
    private javax.swing.JPanel EnginesPanel1;
    private javax.swing.JPanel GameMenu;
    private javax.swing.JPanel GameOverScreen;
    private javax.swing.JPanel HullPanel;
    private javax.swing.JPanel PlayerCombat;
    private javax.swing.JPanel SelectionMenu;
    private javax.swing.JPanel ShipManagementMenu;
    private javax.swing.JPanel StartMenu;
    private javax.swing.JPanel SuperWeapon;
    private javax.swing.JPanel SuperWeaponPanel1;
    private javax.swing.JPanel TutorialMenu1;
    private javax.swing.JPanel TutorialMenu2;
    private javax.swing.JPanel TutorialMenu3;
    private javax.swing.JPanel VictoryScreen;
    private javax.swing.JPanel Weapons;
    private javax.swing.JPanel WeaponsPanel1;
    private javax.swing.JTextArea enemyInfo;
    private javax.swing.JOptionPane errorPopup;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea10;
    private javax.swing.JTextArea jTextArea11;
    private javax.swing.JTextArea jTextArea12;
    private javax.swing.JTextArea jTextArea13;
    private javax.swing.JTextArea jTextArea14;
    private javax.swing.JTextArea jTextArea15;
    private javax.swing.JTextArea jTextArea16;
    private javax.swing.JTextArea jTextArea17;
    private javax.swing.JTextArea jTextArea18;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextArea jTextArea5;
    private javax.swing.JTextArea jTextArea6;
    private javax.swing.JTextArea jTextArea7;
    private javax.swing.JTextArea jTextArea8;
    private javax.swing.JTextArea jTextArea9;
    private javax.swing.JTextArea playerInfo;
    private javax.swing.JTextArea playerInfoCombat;
    // End of variables declaration//GEN-END:variables

    public void gotoStart(){
        location = 0;
        jTabbedPane2.setSelectedIndex(location);
    }
    
    public void gotoMain(){
        updateMain();
        location = 3;
        jTabbedPane2.setSelectedIndex(location);
    }
    
    public void gotoTutorial(){
        jTabbedPane2.setSelectedIndex(2);
    }
    
    public void nextTutorial(){
        switch(tutorialNum){
            case 1:
                jTabbedPane2.setSelectedIndex(8);
                tutorialNum++;
                break;
            case 2:
                jTabbedPane2.setSelectedIndex(9);
                tutorialNum++;
                break;
        }
    }
    
    public void previousTutorial(){
        switch(tutorialNum){
            case 3:
                jTabbedPane2.setSelectedIndex(8);
                tutorialNum--;
                break;
            case 2:
                jTabbedPane2.setSelectedIndex(2);
                tutorialNum--;
                break;
        }
    }
    
    public void gotoManageShip(){
        jTabbedPane2.setSelectedIndex(4);
    }
    
    public void gotoSelection(){
        jTabbedPane2.setSelectedIndex(1);
    }
    
    public void gotoCombat(){
        location = 5;
        jTabbedPane2.setSelectedIndex(5);
    }
    
    public void gotoVictory(){
        jTabbedPane2.setSelectedIndex(6);
    }
    
    public void gotoDefeat(){
        jTabbedPane2.setSelectedIndex(7);
    }
    
    public void updateShip(){
        if(mode == "Normal"){
            int weaponNum = jSlider1.getValue();
            jTextArea8.setText("Hull:\nHealth: " + playerShip.getHull().getCurrentHealth() + ":" + playerShip.getHull().getMaxHealth() + "\nArmor: " + playerShip.getHull().getArmor());
            jTextArea7.setText("Engine:\nMove Speed: " + playerShip.getEngine().getSpeed() + "\nEvade: " + playerShip.getEngine().getEvade() + "\nCooldown: " + playerShip.getEngine().getCooldownTime());
            jTextArea6.setText("Weapon " + (weaponNum+1) + ":\nType: " + playerShip.getWeapon(weaponNum).getType() + "\nDamage: " + playerShip.getWeapon(weaponNum).getDamage() + "\nSize: " + playerShip.getWeapon(weaponNum).getSize() + "\nCooldown: " + playerShip.getWeapon(weaponNum).getCooldownTime());
            if(playerShip.getSuperWeapon() == null){
                jTextArea9.setText("No Super Weapon Installed");
            }
            else{
                jTextArea9.setText("SuperWeapon:\nType: " + playerShip.getSuperWeapon().getType() + "\nDamage: " + playerShip.getSuperWeapon().getDamage() + "\nCooldown: " + playerShip.getSuperWeapon().getCooldownTime() + "\nCharge: " + playerShip.getSuperWeapon().getMaxCharge());          
        }   }
        else{
            int weaponNum = jSlider1.getValue();
            jTextArea8.setText("Hull:\nHealth: " + playerBoss.getSuperHull().getCurrentHealth() + ":" + playerBoss.getSuperHull().getMaxHealth() + "\nArmor: " + playerBoss.getSuperHull().getArmor());
            jTextArea7.setText("Engine:\nMove Speed: " + playerBoss.getSuperEngine().getSpeed() + "\nEvade: " + playerBoss.getSuperEngine().getEvade() + "\nCooldown: " + playerBoss.getSuperEngine().getCooldownTime() + "\nEfficiency: " + playerBoss.getSuperEngine().getEfficiency());
            jTextArea6.setText("Weapon " + (weaponNum+1) + ":\nType: " + playerBoss.getWeapon(weaponNum).getType() + "\nDamage: " + playerBoss.getWeapon(weaponNum).getDamage() + "\nSize: " + playerBoss.getWeapon(weaponNum).getSize() + "\nCooldown: " + playerBoss.getWeapon(weaponNum).getCooldownTime());
            jTextArea9.setText("SuperWeapon:\nType: " + playerBoss.getSuperWeapon().getType() + "\nDamage: " + playerBoss.getSuperWeapon().getDamage() + "\nCooldown: " + playerBoss.getSuperWeapon().getCooldownTime() + "\nCharge: " + playerBoss.getSuperWeapon().getMaxCharge());
        }
    }
    
    public void updateCombatShip(){
        if(mode == "Normal"){
            int weaponNum = jSlider2.getValue();
            jTextArea11.setText("Engine:\nMove Speed: " + playerShip.getEngine().getSpeed() + "\nEvade: " + playerShip.getEngine().getEvade() + "\nCooldown: ");
            if(playerShip.getEngine().getArmed()){
                jTextArea11.append("Ready/"  + playerShip.getEngine().getCooldownTime());
            }
            else{
                jTextArea11.append("" + playerShip.getEngine().getCurrentCooldown());
            }
            jTextArea11.append("\nChoice: " + playerSystem.getEngineChoice());
            jTextArea12.setText("Weapon " + (weaponNum+1) + ":\nType: " + playerShip.getWeapon(weaponNum).getType() + "\nDamage: " + playerShip.getWeapon(weaponNum).getDamage() + "\nSize: " + playerShip.getWeapon(weaponNum).getSize() + "\nCooldown: ");
            if(playerShip.getWeapon(weaponNum).getArmed()){
                jTextArea12.append("Ready/" + playerShip.getWeapon(weaponNum).getCooldownTime());
            }
            else{
                jTextArea12.append("" + playerShip.getWeapon(weaponNum).getCurrentCooldown());
            }
            jTextArea12.append("\nChoice: " + playerSystem.getWeaponChoice(jSlider2.getValue()));
            if(playerShip.getSuperWeapon() == null){
                jTextArea13.setText("No Super Weapon Installed");
            }
            else{
                jTextArea13.setText("SuperWeapon:\nType: " + playerShip.getSuperWeapon().getType() + "\nDamage: " + playerShip.getSuperWeapon().getDamage() + "\nCooldown: ");
                if(playerShip.getSuperWeapon().getArmed()){
                    jTextArea13.append("Ready/"  + playerShip.getSuperWeapon().getCooldownTime());
                }
                else{
                    jTextArea13.append("" + playerShip.getSuperWeapon().getCurrentCooldown());
                }
                jTextArea13.append("\nCharge: " + playerShip.getSuperWeapon().getMaxCharge() + "\nChoice: " + playerSystem.getSuperWeaponChoice());
            }   
        }
        else{
            int weaponNum = jSlider2.getValue();
            jTextArea11.setText("Engine:\nMove Speed: " + playerBoss.getSuperEngine().getSpeed() + "\nEvade: " + playerBoss.getSuperEngine().getEvade() + "\nCooldown: ");
            if(playerBoss.getSuperEngine().getArmed()){
                jTextArea11.append("Ready/" + playerBoss.getSuperEngine().getCooldownTime());
            }
            else{
                jTextArea11.append("" + playerBoss.getSuperEngine().getCurrentCooldown());
            }
            jTextArea11.append("\nEfficiency: " + playerBoss.getSuperEngine().getEfficiency() + "\nChoice: " + playerSystem.getEngineChoice());
            jTextArea12.setText("Weapon " + (weaponNum+1) + ":\nType: " + playerBoss.getWeapon(weaponNum).getType() + "\nDamage: " + playerBoss.getWeapon(weaponNum).getDamage() + "\nSize: " + playerBoss.getWeapon(weaponNum).getSize() + "\nCooldown: ");
            if(playerBoss.getWeapon(weaponNum).getArmed()){
                jTextArea12.append("Ready/"  + playerBoss.getWeapon(weaponNum).getCooldownTime());
            }
            else{
                jTextArea12.append("" + playerBoss.getWeapon(weaponNum).getCurrentCooldown());
            }
            jTextArea12.append("\nChoice: " + playerSystem.getWeaponChoice(jSlider2.getValue()));
            jTextArea13.setText("SuperWeapon:\nType: " + playerBoss.getSuperWeapon().getType() + "\nDamage: " + playerBoss.getSuperWeapon().getDamage() + "\nCooldown: ");
            if(playerBoss.getSuperWeapon().getArmed()){
                jTextArea13.append("Ready/" + playerBoss.getSuperWeapon().getCooldownTime());
            }
            else{
                jTextArea13.append("" + playerBoss.getSuperWeapon().getCurrentCooldown());
            }
            jTextArea13.append("\nCharge: " + playerBoss.getSuperWeapon().getMaxCharge() + "\nChoice: " + playerSystem.getSuperWeaponChoice());
        }
        if(level % 5 != 0){ // enemy not boss
            int weaponNum = jSlider3.getValue() - 1;
            jTextArea14.setText("Engine:\nMove Speed: " + enemyShip.getEngine().getSpeed() + "\nEvade: " + enemyShip.getEngine().getEvade() + "\nCooldown: ");
            if(enemyShip.getEngine().getArmed()){
                jTextArea14.append("Ready/" + enemyShip.getEngine().getCooldownTime());
            }
            else{
                jTextArea14.append("" + enemyShip.getEngine().getCurrentCooldown());
            }
            jTextArea14.append("\nChoice: " + enemySystem.getEngineChoice());
            jTextArea10.setText("Weapon " + (weaponNum+1) + ":\nType: " + enemyShip.getWeapon(weaponNum).getType() + "\nDamage: " + enemyShip.getWeapon(weaponNum).getDamage() + "\nSize: " + enemyShip.getWeapon(weaponNum).getSize() + "\nCooldown: ");
            if(enemyShip.getWeapon(weaponNum).getArmed()){
                jTextArea10.append("Ready/" + enemyShip.getWeapon(weaponNum).getCooldownTime());
            }
            else{
                jTextArea10.append("" + enemyShip.getWeapon(weaponNum).getCurrentCooldown());
            }
            jTextArea10.append("\nChoice: " + enemySystem.getWeaponChoice(weaponNum));
            if(enemyShip.getSuperWeapon() == null){
                jTextArea5.setText("No Super Weapon Installed");
            }
            else{
                jTextArea5.setText("SuperWeapon:\nType: " + enemyShip.getSuperWeapon().getType() + "\nDamage: " + enemyShip.getSuperWeapon().getDamage() + "\nCooldown: ");
                if(enemyShip.getSuperWeapon().getArmed()){
                    jTextArea5.append("Ready/" + enemyShip.getSuperWeapon().getCooldownTime());
                }
                else{
                    jTextArea5.append("" + enemyShip.getSuperWeapon().getCurrentCooldown());
                }
                jTextArea5.append("\nCharge: " + enemyShip.getSuperWeapon().getMaxCharge() + "\nChoice: " + enemySystem.getSuperWeaponChoice());
            }   
        }
        else{
            enemyBoss = (BossShip)enemyShip;
            int weaponNum = jSlider3.getValue() - 1;
            jTextArea14.setText("Engine:\nMove Speed: " + enemyBoss.getSuperEngine().getSpeed() + "\nEvade: " + enemyBoss.getSuperEngine().getEvade() + "\nCooldown: ");
            if(enemyBoss.getSuperEngine().getArmed()){
                jTextArea14.append("Ready/" + enemyBoss.getSuperEngine().getCooldownTime());
            }
            else{
                jTextArea14.append("" + enemyBoss.getSuperEngine().getCurrentCooldown());
            }
            jTextArea14.append("\nEfficiency: " + enemyBoss.getSuperEngine().getEfficiency() + "\nChoice: " + enemySystem.getEngineChoice());
            jTextArea10.setText("Weapon " + (weaponNum+1) + ":\nType: " + enemyBoss.getWeapon(weaponNum).getType() + "\nDamage: " + enemyBoss.getWeapon(weaponNum).getDamage() + "\nSize: " + enemyBoss.getWeapon(weaponNum).getSize() + "\nCooldown: ");
            if(enemyBoss.getWeapon(weaponNum).getArmed()){
                jTextArea10.append("Ready /" + enemyBoss.getWeapon(weaponNum).getCooldownTime());
            }
            else{
                jTextArea10.append("" + enemyBoss.getWeapon(weaponNum).getCurrentCooldown());
            }
            jTextArea10.append("\nChoice: " + enemySystem.getWeaponChoice(jSlider2.getValue()));
            jTextArea5.setText("SuperWeapon:\nType: " + enemyBoss.getSuperWeapon().getType() + "\nDamage: " + enemyBoss.getSuperWeapon().getDamage() + "\nCooldown: ");
            if(enemyBoss.getSuperWeapon().getArmed()){
                jTextArea5.append("Ready");
            }
            else{
                jTextArea5.append("" + enemyBoss.getSuperWeapon().getCurrentCooldown());
            }
            jTextArea5.append("\nCharge: " + enemyBoss.getSuperWeapon().getMaxCharge() + "\nChoice: " + enemySystem.getSuperWeaponChoice());
        }
        
    }
    
    public void updateShipInfo(){
        if (location != 5){// if not in combat
            if(mode == "Normal"){
                playerInfo.setText("Health: " + playerShip.getHull().getCurrentHealth() + "/" + playerShip.getHull().getMaxHealth() + "\nArmor: " + playerShip.getHull().getArmor()
                        + "\nWeapons: " + playerShip.getWeapons().length + "\nStorage: " + playerShip.getWeaponStorage() + "/" + playerShip.getCurrentWeaponStorage()
                        + "\nEvade: " + playerShip.getEngine().getEvade() + "\nMove Speed: " + playerShip.getEngine().getSpeed());
            }
            else{
                playerInfo.setText("Health: " + playerBoss.getSuperHull().getCurrentHealth() + "/" + playerBoss.getSuperHull().getMaxHealth() + "\nArmor: " + playerBoss.getSuperHull().getArmor()
                        + "\nWeapons: " + playerBoss.getWeapons().length + "\nStorage: " + playerBoss.getWeaponStorage() + "/" + playerBoss.getCurrentWeaponStorage()
                        + "\nEvade: " + playerBoss.getSuperEngine().getEvade() + "\nMove Speed: " + playerBoss.getSuperEngine().getSpeed());
            }
        }
        else{
            if(mode == "Normal"){
                playerInfoCombat.setText("Health: " + playerShip.getHull().getCurrentHealth() + "/" + playerShip.getHull().getMaxHealth() + "\nArmor: " + playerShip.getHull().getArmor());
            }
            else{
                playerInfoCombat.setText("Health: " + playerBoss.getSuperHull().getCurrentHealth() + "/" + playerBoss.getSuperHull().getMaxHealth() + "\nArmor: " + playerBoss.getSuperHull().getArmor());
            }
            if(level != 5){
                enemyInfo.setText("Health: " + enemyShip.getHull().getCurrentHealth() + "/" + enemyShip.getHull().getMaxHealth() + "\nArmor: " + enemyShip.getHull().getArmor()
                        + "\nWeapons: " + enemyShip.getWeapons().length + "\nEvade: " + enemyShip.getEngine().getEvade() + "\nMove Speed: " + enemyShip.getEngine().getSpeed());
            }
            else{
                enemyBoss = (BossShip)enemyShip;
                enemyInfo.setText("Health: " + enemyBoss.getSuperHull().getCurrentHealth() + "/" + enemyBoss.getSuperHull().getMaxHealth() + "\nArmor: " + enemyBoss.getSuperHull().getArmor() + "\nShields: " + enemyBoss.getSuperHull().getCurrentShield() + "/" + enemyBoss.getSuperHull().getMaxShield()
                        + "\nWeapons: " + enemyBoss.getWeapons().length + "\nEvade: " + enemyBoss.getSuperEngine().getEvade() + "\nMove Speed: " + enemyBoss.getSuperEngine().getSpeed());
            }
        }
    }
    
    public void updateMain(){
        jTextArea1.setText("Current Level: " + level);
        if(mode == "Normal"){
            jTextArea1.append("\nHealth: " + playerShip.getHull().getCurrentHealth() + "/" + playerShip.getHull().getMaxHealth()
                    + "\nWeapons: " + playerShip.getWeapons().length + "\nStorage: " + playerShip.getCurrentWeaponStorage() + "/" + playerShip.getWeaponStorage());
        }
        if((level + 1) % 5 == 0){
            jLabel13.setText("Next combat is a Boss Fight");
        }
        else{
            jLabel13.setText("Next combat is a Normal Fight");
        }
    }
    
    public void beginSelect(String component, int level){
        switch(component){
            case "Engine":
                selection = component;
                engine1 = Gen.generateEngine(level);
                engine2 = Gen.generateEngine(level);
                engine3 = Gen.generateEngine(level);
                jTextArea2.setText("Engine 1\nEvade: " + engine1.getEvade() + "\nSpeed: "+ engine1.getSpeed() + "\nCooldown: " + engine1.getCooldownTime());
                jTextArea3.setText("Engine 2\nEvade: " + engine2.getEvade() + "\nSpeed: "+ engine2.getSpeed() + "\nCooldown: " + engine2.getCooldownTime());
                jTextArea4.setText("Engine 3\nEvade: " + engine3.getEvade() + "\nSpeed: "+ engine3.getSpeed() + "\nCooldown: " + engine3.getCooldownTime());
                break;
            case "SuperEngine":
                selection = component;
                sengine1 = Gen.generateSuperEngine(level);
                sengine2 = Gen.generateSuperEngine(level);
                sengine3 = Gen.generateSuperEngine(level);
                jTextArea2.setText("Engine 1\nEvade: " + sengine1.getEvade() + "\nSpeed: "+ sengine1.getSpeed() + "\nCooldown: " + sengine1.getCooldownTime() + "\nEfficency: " + sengine1.getEfficiency());
                jTextArea3.setText("Engine 2\nEvade: " + sengine2.getEvade() + "\nSpeed: "+ sengine2.getSpeed() + "\nCooldown: " + sengine2.getCooldownTime() + "\nEfficency: " + sengine2.getEfficiency());
                jTextArea4.setText("Engine 3\nEvade: " + sengine3.getEvade() + "\nSpeed: "+ sengine3.getSpeed() + "\nCooldown: " + sengine3.getCooldownTime() + "\nEfficency: " + sengine3.getEfficiency());
                break;
            case "Hull":
                selection = component;
                hull1 = Gen.generateHull(level, true);
                hull2 = Gen.generateHull(level, true);
                hull3 = Gen.generateHull(level, true);
                jTextArea2.setText("Hull 1\nHealth: " + hull1.getMaxHealth() + "\nArmor: "+ hull1.getArmor());
                jTextArea3.setText("Hull 2\nHealth: " + hull2.getMaxHealth() + "\nArmor: "+ hull2.getArmor());
                jTextArea4.setText("Hull 3\nHealth: " + hull3.getMaxHealth() + "\nArmor: "+ hull3.getArmor());
                break;
            case "SuperHull":
                selection = component;
                shull1 = Gen.generateSuperHull(level, true);
                shull2 = Gen.generateSuperHull(level, true);
                shull3 = Gen.generateSuperHull(level, true);
                jTextArea2.setText("Hull 1\nHealth: " + shull1.getMaxHealth() + "\nArmor: "+ shull1.getArmor());
                jTextArea3.setText("Hull 2\nHealth: " + shull2.getMaxHealth() + "\nArmor: "+ shull2.getArmor());
                jTextArea4.setText("Hull 3\nHealth: " + shull3.getMaxHealth() + "\nArmor: "+ shull3.getArmor());
                break;
            case "Weapon":
                selection = component;
                weapon1 = Gen.generateWeapon(level);
                weapon2 = Gen.generateWeapon(level);
                weapon3 = Gen.generateWeapon(level);
                jTextArea2.setText("Weapon 1\nType: " + weapon1.getType() + "\nDamage: "+ weapon1.getDamage() + "\nSize: " + weapon1.getSize() + "\nCooldown: " + weapon1.getCooldownTime());
                jTextArea3.setText("Weapon 2\nType: " + weapon2.getType() + "\nDamage: "+ weapon2.getDamage() + "\nSize: " + weapon2.getSize() + "\nCooldown: " + weapon2.getCooldownTime());
                jTextArea4.setText("Weapon 3\nType: " + weapon3.getType() + "\nDamage: "+ weapon3.getDamage() + "\nSize: " + weapon3.getSize() + "\nCooldown: " + weapon3.getCooldownTime());
                break;
            case "SuperWeapon":
                selection = component;
                sweapon1 = Gen.generateSuperWeapon(level);
                sweapon2 = Gen.generateSuperWeapon(level);
                sweapon3 = Gen.generateSuperWeapon(level);
                jTextArea2.setText("Super Weapon 1\nType: " + sweapon1.getType() + "\nDamage: "+ sweapon1.getDamage() + "\nSize: " + sweapon1.getSize() + "\nCharge Time: " + sweapon1.getMaxCharge() + "\nCooldown: " + sweapon1.getCooldownTime());
                jTextArea3.setText("Super Weapon 2\nType: " + sweapon2.getType() + "\nDamage: "+ sweapon2.getDamage() + "\nSize: " + sweapon2.getSize() + "\nCharge Time: " + sweapon2.getMaxCharge() + "\nCooldown: " + sweapon2.getCooldownTime());
                jTextArea4.setText("Super Weapon 3\nType: " + sweapon3.getType() + "\nDamage: "+ sweapon3.getDamage() + "\nSize: " + sweapon3.getSize() + "\nCharge Time: " + sweapon3.getMaxCharge() + "\nCooldown: " + sweapon3.getCooldownTime());
                break;
        }
        location = 1;
        gotoSelection();
        
    }

    public void choose(String type, int choice){
        Hull hullChoice = null;
        SuperHull sHullChoice = null;
        Engine engineChoice = null;
        SuperEngine sEngineChoice = null;
        Weapon weaponChoice = null;
        SuperWeapon sWeaponChoice = null;
        
        
         
        switch(choice){
            case(1):
                hullChoice = hull1;
                sHullChoice = shull1;
                engineChoice = engine1;
                sEngineChoice = sengine1;
                weaponChoice = weapon1;
                sWeaponChoice = sweapon1;
                break;
            case(2):
                hullChoice = hull2;
                sHullChoice = shull2;
                engineChoice = engine2;
                sEngineChoice = sengine2;
                weaponChoice = weapon2;
                sWeaponChoice = sweapon2;
                break;
            case(3):
                hullChoice = hull3;
                sHullChoice = shull3;
                engineChoice = engine3;
                sEngineChoice = sengine3;
                weaponChoice = weapon3;
                sWeaponChoice = sweapon3;
                break;
                
        }
        if(mode == "Normal"){
            switch(type){
            case "Engine":
                playerShip.setEngine(engineChoice);
                break;
            case "Hull":
                playerShip.setHull(hullChoice);
                break;
            case "Weapon":
                playerShip.addWeapon(weaponChoice);
                jSlider1.setMaximum(playerShip.getWeapons().length - 1);
                jSlider2.setMaximum(playerShip.getWeapons().length - 1);
                break;
            case "SuperWeapon":
                playerShip.setSuperWeapon(sWeaponChoice);
                break;
            }
        }
        else{
            switch(type){
                case "SuperEngine":
                    playerBoss.setSuperEngine(sEngineChoice);
                    break;
                case "SuperHull":
                    playerBoss.setSuperHull(sHullChoice);
                    break;
                case "Weapon":
                    playerBoss.addWeapon(weaponChoice);
                    jSlider1.setMaximum(playerBoss.getWeapons().length - 1);
                    jSlider2.setMaximum(playerBoss.getWeapons().length - 1);
                    break;
                case "SuperWeapon":
                    playerBoss.setSuperWeapon(sWeaponChoice);
                    break;
                }
        }
                
        
        if (!completedStart){
            if(mode == "Normal"){
                switch(selectNum){
                    case(1):
                        selection = "Hull";
                        beginSelect("Hull", 1);
                        selectNum++;
                        break;
                    case(2):
                        selection = "Weapon";
                        beginSelect("Weapon", 1);
                        selectNum++;
                        break;
                    case(3):
                        selection = "Weapon";
                        beginSelect("Weapon", 1);
                        selectNum++;
                        break;
                    case(4):
                        gotoMain();
                        completedStart = true;
                        selectNum++;
                        break;
                }
                
            }
            else{
                switch(selectNum){
                    case(1):
                        selection = "SuperHull";
                        beginSelect("SuperHull", 1);
                        selectNum++;
                        break;
                    case(2):
                        selection = "Weapon";
                        beginSelect("Weapon", 1);
                        selectNum++;
                        break;
                    case(3):
                        selection = "Weapon";
                        beginSelect("Weapon", 1);
                        selectNum++;
                        break;
                    case(4):
                        selection = "SuperWeapon";
                        beginSelect("SuperWeapon", 1);
                        selectNum++;
                        break;
                    case(5):
                        gotoMain();
                        completedStart = true;
                        selectNum++;
                        break;
                        
                }
            }
        }
        else{
            if (level % 5 == 0 && level != 0 && !superWeaponCheck){
                beginSelect("SuperWeapon", level);
                superWeaponCheck = true;
            }
            else{
            gotoMain();
            superWeaponCheck = false;
            }
        }
    }

    public void startLevel(){
        if(level % 5 == 0 && level != 0){
            enemyShip = new BossShip(false, level);
            enemyShip.setSuperWeapon(Gen.generateSuperWeapon(level));
            jLabel11.setText("Boss Fight");
            jLabel12.setText("Boss Fight");
        }
        else{
            jLabel11.setText("Normal Fight");
            jLabel12.setText("Normal Fight");
            enemyShip = new Ship(false, level);
        }
        if(mode == "Normal"){
            playerSystem = new TurnSystem(playerShip, enemyShip);
            enemySystem = new TurnSystem(enemyShip, playerShip);
        }
        else{
            playerSystem = new TurnSystem(playerBoss, enemyShip);
            enemySystem = new TurnSystem(enemyShip, playerBoss);
        }
        jSlider3.setMaximum(enemyShip.getWeapons().length);
        
        jTextArea18.setText("");

        
        updateCombatShip();
        startTurn();
    }
    
    public void startTurn(){

        if (turn != 0){
            
            jTextArea18.append("Turn " + turn);
            
            if(level % 5 == 0 && level != 0){
                jTextArea18.append("\nPlayer Dealt " + damageDealtP + " Post Mitigation Damage");
            }
            else{
               jTextArea18.append("\nPlayer Dealt " + damageDealtP + " Post Mitigation Damage");
            }
        //(int)(damage *(1-(this.getArmor() *.01)))
        
            if(mode == "Normal"){
                jTextArea18.append("\nEnemy Dealt " + damageDealtE + " Post Mitigation Damage\n");
            }
            else{
                jTextArea18.append("\nEnemy Dealt " + damageDealtE + " Post Mitigation Damage\n");
            }
        }
        playerSystem.resetAllChoices();
        enemySystem.resetAllChoices();
        
        jLabel14.setText("Turn " + ++turn);
        AI.makeChoices(enemySystem, enemyShip.getWeapons().length);
        updateShipInfo();
        updateCombatShip();
        gotoCombat();
    }
    
    public void checkEndLevel(){
        if(enemySystem.levelEnd()){
            gotoDefeat();
            turn = 1;
        }
        else if(playerSystem.levelEnd()){
            gotoVictory();
            level++;
            turn = 1;
            if(mode == "Normal"){
                playerShip.repair((int)(playerShip.getHull().getMaxHealth() * .1));
            }
            else{
                playerBoss.repair((int)(playerBoss.getSuperHull().getMaxHealth() * .1));
            }
            for (int i = 0; i < 50; i++){
                playerSystem.advanceWeaponTurn();
                playerSystem.advanceEngineTurn();
            }
        }
        else{
            startTurn();
        }
    }
}
